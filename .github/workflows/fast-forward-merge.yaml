name: fast-forward-merge

on:
  issue_comment:
    types:
      - created

jobs:
  fast-forward-merge:
    runs-on: ubuntu-latest
    # Only run this job when it's a comment in a pull request and the message is 'fast forward merge'
    if: contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, 'fast forward merge')
    steps:
      - uses: hmarr/debug-action@v2

      - uses: actions/github-script@v4
        with:
          script: |
            console.log(context)
            console.log(${{ toJSON(github) }})

      - name: Gets the pull request
        uses: actions/github-script@v4
        id: get-pr
        with:
          script: |
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            })

            console.log(pr.data)

            return pr.data
      
      - name: Get pull request Status API
        uses: octokit/request-action@v2.x
        id: get-pr-status-api
        with:
          route: GET /repos/{repo}/commits/{ref}/status
          repo: ${{ github.repository }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify pull request checks
        uses: actions/github-script@v4
        env:
          PULL_REQUEST: ${{ steps.get-pr.outputs.result }}
          PR_STATUS_API_DATA: ${{ steps.get-pr-status-api.outputs.data  }}
        with:
          script: |
            const pullRequest = JSON.parse(process.env.PULL_REQUEST)
            const statusApi = JSON.parse(process.env.PR_STATUS_API_DATA)

            const prReviews = await github.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
            });

            console.log(prReviews.data)

            const approvedReviews = prReviews.data.filter(prReview => prReview.status == 'APPROVED');
            const changesRequestedReviews = prReviews.data.filter(prReview => prReview.status == 'CHANGES_REQUESTED');

            if (
              // Check if the branch can be merged by git
              pullRequest.mergeable &&
              // Check if the status checks is ok for the pull request
              (statusApi.state === 'success' || statusApi.state === 'pending' && statusApi.statuses.length == 0) &&
              // Check if it's approved and there is no request for changes
              (approvedReviews.length > 0 && changesRequestedReviews.length == 0)
            ) {
              core.info(`Pull request ${pullRequest.url} ready to be merged`)
            } else {
              const erroMsg = "Pull request not ready to be merged... ";

              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `:sleeping: ${erroMsg}`
              }``

              core.setFailed(erroMsg);
            }

      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Fetch everything
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Merge
        env:
          GIT_BASE_BRANCH: ${{ fromJSON(steps.get-pr.outputs.result).base.ref }}
          GIT_HEAD_BRANCH: ${{ fromJSON(steps.get-pr.outputs.result).head.ref }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          
          git checkout $GIT_BASE_BRANCH
          git merge --ff-only origin/$GIT_HEAD_BRANCH
          git push origin $GIT_BASE_BRANCH
